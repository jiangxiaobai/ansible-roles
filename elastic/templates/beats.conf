input {
  beats {
    host => "{{ ls_beats_host }}"
    port => {{ ls_beats_port }}
  }
}

filter {
  if[fields][document_type] == "nginx_proxy_log" {
    grok {
      match => {
        "message" => '%{IPORHOST:remote_addr} - %{USERNAME:remote_user} \[%{HTTPDATE:time_local}\] "%{WORD:method} %{URIPATHPARAM:request} HTTP/%{NUMBER:http_version}" %{NUMBER:status} (?:%{NUMBER:bytes_sent}|-) "%{DATA:http_referer}" "%{DATA:http_user_agent}" "%{DATA:http_x_forwarded_for}" %{NUMBER:request_time} "%{DATA:upstream_addr}" "%{DATA:upstream_status}" "%{DATA:upstream_response_time}"'
      }
    }
    grok {
      match => {
        "request" => '%{URIPATH:request_uripath}(?:%{URIPARAM:request_uriparam})?'
      }
    }
    mutate {
      split => [ "upstream_addr", ", " ]
      split => [ "upstream_status", ", " ]
      split => [ "upstream_response_time", ", " ]
    }
    mutate {
      convert => [ "status", "integer" ]
      convert => [ "bytes_sent", "integer" ]
      convert => [ "request_time", "float" ]
      convert => [ "upstream_status", "integer" ]
      convert => [ "upstream_response_time", "float" ]
    } 
    date {
      match => [ "time_local", "dd/MMM/YYYY:H:m:s Z" ]
      remove_field => "time_local"
    }
    geoip {
      source => "remote_addr"
      target => "geoip"
    }
    useragent {
      source => "http_user_agent"
      target => "user_agent"
      remove_field => "http_user_agent"
    }
  }
}

output {
  elasticsearch {
    hosts => [{% for host in play_hosts|sort %}"{{ host }}:{{ es_port }}"{% if not loop.last %}, {% endif %}{% endfor %}]
    index => "logstash-%{[fields][document_type]}-%{[@metadata][beat]}-%{[@metadata][version]}-%{+YYYY.MM.dd}"
  }
  stdout { codec => rubydebug }
}
